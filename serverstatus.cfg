/**********************************************************
*** Configuration file									 ***
**********************************************************/

// may be necessary at some point
version = "v0.5-beta.2";


// path where output files shell be saved at
filepath = "/usr/local/etc/serverstatus/";


distribution = 
{
	// application behaviour:
	//  1) server - listen for a transmission of other clients
	//  2) client - send data to a server
	//  3) standalone
	application = "server";

	// change to server ip (or url) if application is set to client
	server_address = "127.0.0.1";

	// change to port on which a server should listen or
	// a client should send data to
	server_port = "4242";
	
	// specify if traffic should be encrypted
	ssl = true;
	
	// provide a certificate and keyfile on server side to encrypt traffic
	// Note: Provide a absolute path!
	certificate = "/serverstatus.pem";
	key = "/serverstatus.pem";
	
}


load = 
{
	interval = 1;
	elements = 30;
	
	input = "CMD";
	output = "JSON";
	
	cmd = ["uptime | awk '{print $(NF-2)}' | sed 's/,/./'",
	       "uptime | awk '{print $(NF-1)}' | sed 's/,/./'",
	       "uptime | awk '{print $(NF)}'   | sed 's/,/./'"];
	
	json = {
		header = {
			title = "Load Average",
			type = "line",
			refreshEveryNSeconds = 60,
			yAxis = { 
				minValue = 0,
				maxValue = 3
			}
		};
		sequence = {
			title = ["1 Minute", 
			         "5 Minutes", 
			         "15 Minutes"];
			colors = ["red",
			          "green",
			          "blue"];
		}
	}	
}

cpu = 
{
	interval = 1;
	elements = 30;
	
	input = "RECEIVE FROM 127.0.0.1 ID MCBK2012";
	output = "JSON";
	
	json = {
		header = {
			title = "CPU Temperature",
			type = "line",
			refreshEveryNSeconds = 60,
			yAxis = { 
				minValue = 20,
				maxValue = 50
			}
		};
		sequence = {
			title = ["Core 1", 
			         "Core 2"];
			colors = ["red",
			          "green"];
		}
	}
}

hdd = 
{
	interval = 60;
	elements = 30;
	
	input = "CMD";
	output = "JSON"
	
	cmd = ["sudo smartctl -a /dev/ada0 | awk '/Temperature_Celsius/{print $0}' | awk '{print $10}",
	       "sudo smartctl -a /dev/ada1 | awk '/Temperature_Celsius/{print $0}' | awk '{print $10}",
		   "sudo smartctl -a /dev/ada2 | awk '/Temperature_Celsius/{print $0}' | awk '{print $10}",
		   "sudo smartctl -a /dev/ada3 | awk '/Temperature_Celsius/{print $0}' | awk '{print $10}",
		   "sudo smartctl -a /dev/ada4 | awk '/Temperature_Celsius/{print $0}' | awk '{print $10}",
		   "sudo smartctl -a /dev/ada5 | awk '/Temperature_Celsius/{print $0}' | awk '{print $10}"];
		
	json = {
		header = {
			title = "HDD Temperature",
			type = "line",
			refreshEveryNSeconds = 300,
			yAxis = { 
				minValue = 20,
				maxValue = 50
			}
		};
		sequence = {
			title = ["SSD", 
			         "HDD 1",
					 "HDD 2",
					 "HDD 3",
					 "HDD 4",
					 "HDD 5"];
		}
	}
}

mount = 
{
	interval = 60;
	elements = 1;
	
	input = "CMD";
	output = "JSON";
	
	cmd = ["df | grep ^Data/Filme | awk '{print $4}'",
	       "df | grep ^Data/Audio | awk '{print $3}'",
		   "df | grep ^Data/Dokumente | awk '{print $3}'",
		   "df | grep ^Data/Filme | awk '{print $3}'",
		   "df | grep ^Data/Programme | awk '{print $3}'",
		   "df | grep ^Data/Spiele | awk '{print $3}'"];
	
	json = {
		header = {
			title = "Disc Space",
			type = "bar",
			refreshEveryNSeconds = 300,
		};
		sequence = {
			title = ["Free", 
			         "Audio",
					 "Documents",
					 "Movies",
					 "Programs",
					 "Games"];
		}
	}
}

memory = 
{
	interval = 1;
	elements = 30;
	
	input = "CMD";
	output = "SEND TO 127.0.0.1 ID MCBK2012";
	
	cmd = ["top -d1 | grep ^Mem | awk '{print $2}'  | sed 's/M//'",
	       "top -d1 | grep ^Mem | awk '{print $4}'  | sed 's/M//'",
		   "top -d1 | grep ^Mem | awk '{print $6}'  | sed 's/M//'",
		   "top -d1 | grep ^Mem | awk '{print $6}'  | sed 's/M//'",
		   "top -d1 | grep ^Mem | awk '{print $10}' | sed 's/M//'"];
	
	json = {
		header = {
			title = "Memory",
			type = "bar",
			refreshEveryNSeconds = 60,
		};
		sequence = {
			title = ["Active", 
			         "Inactive",
					 "Wired",
					 "Buffer",
					 "Free"];
		}
	}
}


network = 
{
	interval = 1;
	elements = 30;
	delta = true;
	
	input = "CMD";
	output = "JSON";
	
	cmd = ["netstat -I em0 -b | awk '{ if (/Link/) { print $8 } }' ",
	       "netstat -I em0 -b | awk '{ if (/Link/) { print $11 } }'"];
	
	json = {
		header = {
			title = "Network Traffic",
			type = "line",
			refreshEveryNSeconds = 60,
		};
		sequence = {
			title = ["In", 
			         "Out"];
			colors = ["red",
			          "green"];
		}
	}
}